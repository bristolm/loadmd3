#include "ModelScratchPad.h"

ModelScratchPad& ModelScratchPad::operator=( const ModelScratchPad& rhs)
{	// Just copy some stuff over
	strcpy(QuakeDir,rhs.QuakeDir);
	strcpy(ModelDir,rhs.ModelDir);

	strcpy(Name,rhs.Name);
	SaveModel = rhs.SaveModel;
	strcpy(AnchorName,rhs.AnchorName);

	strcpy(CfgName,rhs.CfgName);
	SaveCfg = rhs.SaveCfg;

	strcpy(HeaderFile,rhs.HeaderFile);

	// Fill in model name based on this stuff
	sprintf(tmp,"%s.md3",Name);
	Model.UpdateName(tmp);

	return *this;
}

void ModelScratchPad::dumpCfgFile()
{
	FILE *fp = 0;
	FILE *fpHeader = 0;

	// Import header file stuff and incorporate it
	if (HeaderFile[0] != 0)
	{
		fpHeader = fopen(HeaderFile,"r");

		if (fpHeader == (FILE *)NULL)
		{
			sprintf(tmp,"%s%s%s%s%s",QuakeDir,DIR_SEPARATOR,
									ModelDir,DIR_SEPARATOR,
									HeaderFile);
			fpHeader = fopen(tmp,"r");
		}

	}

	// Now the output file
	sprintf(tmp,"%s%s%s%s%s",QuakeDir,DIR_SEPARATOR,
							ModelDir,DIR_SEPARATOR,
							CfgName);

	if ((fp = fopen(tmp,"w")) == (FILE *)NULL)
		return;

	if (fpHeader != 0)
	{
		while(!feof(fpHeader ))
		{
			char *p = fgets(tmp,512,fpHeader);
			if (ferror(fpHeader))
				break;

			fputs(tmp,fp);
		}

		fclose(	fpHeader);
		fpHeader = 0;
	}

	fprintf(fp,"\n// Frame list Generated by LW Export Plugin v%s\n",PROG_VERSION); 
	int iStart = 0;
	for (int i = 0; Loops && Loops[i]; i++)
	{
		int idx = Loops[i]->ID;
		MD3Loop *loop = SpecificLoopData[idx];
		if (loop == 0)
		{
			loop = new MD3Loop(idx);
			SpecificLoopData[idx] = loop;
		}

		int loo = loop->LoopingFrames;
		if (loo < 0)
			loo = Loops[i]->length;

		fprintf(fp,"%d\t%d\t%d\t%d\t\t// %s %s\n",
					iStart, Loops[i]->length,
					loo, loop->FPS,
					Loops[i]->Name, loop->Notes);
		iStart += Loops[i]->length;
	}

	fclose(fp);
	fp = 0;
}


// Lump values for Load/Save
#define ID_MD3D  LWID_( 'M','D','3','D' )
#define ID_MD3L  LWID_( 'M','D','3','L' )
static LWBlockIdent idmain[] = {
	ID_MD3D, "MD3Data",
	0
};

#define ID_MD3G  LWID_( 'M','D','3','G' )
#define ID_MD3M  LWID_( 'M','D','3','M' )
#define ID_MD3C  LWID_( 'M','D','3','C' )
static LWBlockIdent idelement[] = {
	ID_MD3G, "General",
	ID_MD3M, "Model",
	ID_MD3C, "CFG",
	ID_MD3L, "MD3Loop",
	0
};

void ModelScratchPad::SAVE(const LWSaveState *save)
{
	float f[1] = {0};
	f[0] = PLUGINVERSION ;
	short s[3] = {0};

	// Spit out version
	LWSAVE_FP(save,f,1);
	
	LWSAVE_BEGIN( save, &idmain[ 0 ], 0 );

	if (this == 0)
	{	// Save generic data - roll through the loops
		for (unsigned int loopidx = 0; loopidx < SpecificLoopData.Next(); loopidx ++)
		{
			MD3Loop *loop = SpecificLoopData[loopidx];
			if (loop == 0)
				continue;
			LWSAVE_BEGIN( save, &idelement[ 3 ], 1 );
			s[0] = loop->index;
			s[1] = loop->LoopingFrames;
			s[2] = loop->FPS;
			LWSAVE_I2( save, s, 3);
			LWSAVE_STR(save, loop->Notes);
			LWSAVE_END( save );
		}
	}
	else
	{	// Save specific model data
		LWSAVE_BEGIN( save, &idelement[ 0 ], 1 );
		 LWSAVE_STR(save, QuakeDir);
		 LWSAVE_STR(save, ModelDir);
		LWSAVE_END( save );

		LWSAVE_BEGIN( save, &idelement[ 1 ], 1 );
		 s[0] = SaveModel;
		 LWSAVE_STR(save, Name);
		 LWSAVE_STR(save, AnchorName);
		 LWSAVE_I2(save, s,1);
		LWSAVE_END( save );

		LWSAVE_BEGIN( save, &idelement[ 2 ], 1 );
		 s[0] = SaveCfg;
		 LWSAVE_STR(save, CfgName);
		 LWSAVE_I2(save, s,1);
		 LWSAVE_STR(save, HeaderFile);
		 LWSAVE_STR(save, "");
		 LWSAVE_STR(save, "");
		LWSAVE_END( save );
	}
	LWSAVE_END( save );
}

int ModelScratchPad::LOAD(const LWLoadState *load)
{
	int retval = 0;		// Return 0 if we really didn't do anything here ...

	float f[1];
	LWLOAD_FP(load,f,1);		// Snag version

	MD3Loop *loop = 0;
	short s[3];
	s[0] = s[1] = s[2] = 0;

	LWID id = LWLOAD_FIND( load, idmain );
	while ( id = LWLOAD_FIND( load, idelement ))
	{
		switch ( id )
		{
		case ID_MD3G:		// General
			retval = 1;
			LWLOAD_STR(load,QuakeDir,256);
			LWLOAD_STR(load,ModelDir,256);
			break;
		case ID_MD3M:		// Model
			retval = 1;
			LWLOAD_STR(load,Name,256);
			LWLOAD_STR(load,AnchorName,256);
			LWLOAD_I2(load,s,1);
			SaveModel = s[0];
			break;
		case ID_MD3C:		// CFG
			retval = 1;
			LWLOAD_STR(load,CfgName,256);
			LWLOAD_I2(load,s,1);
			SaveCfg = s[0];
			LWLOAD_STR(load,HeaderFile,256);
			LWLOAD_STR(load,tmp,256);
			LWLOAD_STR(load,tmp,256);
			break;

		case ID_MD3L:			// Per-Loop data
			LWLOAD_I2(load,s,3);

			// Use the 'new' id for this frame
			loop = new MD3Loop(s[0]);
			loop->LoopingFrames = s[1];
			loop->FPS = s[2];
			LWLOAD_STR(load,loop->Notes,256);
			SpecificLoopData[s[0]] = loop;
			break;
		}
		LWLOAD_END( load );
	}	

	LWLOAD_END( load );

	return retval;
}